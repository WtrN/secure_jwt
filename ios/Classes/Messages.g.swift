// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class MessagesPigeonCodecReader: FlutterStandardReader {
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SecureJwtHostApi {
  func generateKey(algorithm: String, keyId: String?, completion: @escaping (Result<String, Error>) -> Void)
  func sign(header: String, payload: String, keyId: String, completion: @escaping (Result<String, Error>) -> Void)
  func verify(jwt: String, completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SecureJwtHostApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `SecureJwtHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SecureJwtHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let generateKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.secure_jwt.SecureJwtHostApi.generateKey\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      generateKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let algorithmArg = args[0] as! String
        let keyIdArg: String? = nilOrValue(args[1])
        api.generateKey(algorithm: algorithmArg, keyId: keyIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      generateKeyChannel.setMessageHandler(nil)
    }
    let signChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.secure_jwt.SecureJwtHostApi.sign\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let headerArg = args[0] as! String
        let payloadArg = args[1] as! String
        let keyIdArg = args[2] as! String
        api.sign(header: headerArg, payload: payloadArg, keyId: keyIdArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      signChannel.setMessageHandler(nil)
    }
    let verifyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.secure_jwt.SecureJwtHostApi.verify\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      verifyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let jwtArg = args[0] as! String
        api.verify(jwt: jwtArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      verifyChannel.setMessageHandler(nil)
    }
  }
}
